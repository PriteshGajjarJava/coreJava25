{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red41\green0\blue130;\red0\green0\blue0;\red0\green0\blue255;
\red255\green255\blue255;\red157\green0\blue210;\red32\green108\blue135;\red0\green0\blue109;\red101\green76\blue29;
\red11\green90\blue180;\red144\green1\blue18;\red15\green112\blue1;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c21681\c10251\c58230;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c100000;
\cssrgb\c100000\c100000\c100000;\cssrgb\c68627\c0\c85882;\cssrgb\c14902\c49804\c60000;\cssrgb\c0\c6275\c50196;\cssrgb\c47451\c36863\c14902;
\cssrgb\c0\c43922\c75686;\cssrgb\c63922\c8235\c8235;\cssrgb\c0\c50196\c0;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww38200\viewh18420\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs68 \cf0 												                                Core Java
\f1\b0 		\
	- Java is OOP language	\
	- Current version is 24.\
	- We should be using LTS version. 21, 17, 11, 8\
\
Steps of java code:\
- Create a file with extension \'93.java\'94 (e.g. SayWelcome.java)\
- For compilation use \'93
\f0\b \cf2 javac
\f1\b0 \cf0  <file-name>\'94.  e.g. #javac SayWelcome.java \
- If program is successfully complied, it will generate a byte code in file with extension \'93.class\'94 \
- To run java program use \'93
\f0\b \cf2 java
\f1\b0 \cf0 \'94 command.  e.g. #java SayWelcome \
\
JDK - Java Development Kit\
JRE - Java Runtime Environment\
JVM - Java Virtual Machine \
\
We have to download JDK. \
\
\

\f0\b Java is Platform independent language:\

\f1\b0 \
 In language like C/C++, when we compile the program directly m/c code is generated which is understood by native OS.\
 Machine code cannot be ported to other platforms. So there is platform dependency.\
\
 In Java running program is 2 step process\
	1) Compilation - Source code -> Byte code (this is not m/c code)\
	2) Interpretation- ByteCode(.class) -> M/c Code\
\
If we have to port Java program to other platforms, we can easily port byte code. \
Because Byte code is platform independent.\
\
Bytecode is understood by all JVM\'92s (irrespective of OS/platform). \
It\'92s JVM responsibility to convert byte code in m/c language.\
\
Cross Compilation : Program compiled on one m/c can run on other m/c. Java is cross-compiled lang. \
WORA - Write once Run Anywhere. Java follows this idea. (Provided that versions are compatible)\
\
Java versions are backward compatible. \
\
	If we compile Java program with Java11 then it would work on any OS have Java version 11 or later. \
	\
	Program Compiled with 
\f0\b Java 11
\f1\b0  can run on multiple platform as below.\
								v8	             v11        v17\
		windows.       NO               Y           Y\
		Linux             NO               Y           Y\
		Mac OSX      NO               Y           Y\
 		Android 	      NO               Y           Y\
\
	Java is both - \'93
\f0\b Compiled and Interpreted
\f1\b0 \'94 lang.\
\
What is class?\
- Class is an encapsulation of related things (properties + functions).\
- It\'92s a blueprint of an object. \
\
	In Java we define class using \'93class\'94 keyword.\
	Syntax: class <class-name>\
\
	e.g. class Employee \{ \}, class Student \{ \} \'85\
\
What is an object?\
- Object is an 
\f0\b instance
\f1\b0  of a class.\
- Object gives real meaning to the class.\
\
e.g. If you have a empty photo frame in the house - It\'92s a \'93class\'94. Once you put photo of someone (let\'92s say Sachin), it gives real identity to the photo frame. Now you can say it\'92s a photo frame of \'93Sachin\'94.\
In this example - PhotoFrame is a class, Sachin\'92s photo is an object.\

\f0\b \
How we create object in Java?\
- 
\f1\b0 To create object in java we use \'93new\'94 operator. \
Syntax:\
					<Class-name> <obj-name> = new <Class-Name> ( );\
				e.g. Employee e1 = new Employee( );\
\

\f0\b What all things class can consist of?\

\f1\b0 We can have following in a class.\
\
- Properties (instance, static)\
- Methods (instance, static)\
- Constructor\
- instance block\
- static block\
- inner class \

\f0\b \
Instance(non-static) v/s static properties:\

\f1\b0 Instance properties - Properties of an object. e.g. \'93empId, empName\'94 in Employee class\
We need an object/instance to access these properties.\
\
Static properties: Properties of a class. e.g \'93CompanyName\'94 in case of Employee (Assumption all employees are from same company).\
We declare static properties using \'93static\'94 keyword.\
e.g. static String companyName = \'93Wipro\'94;\
We can access static properties directly using class name. (e.g. Employee.companyName)\
\
Can we access static property/function with object?\
Yes. (But not recommended)\

\f0\b \
File Naming Rule:\
- 
\f1\b0 File name must be same as public class declared in the file.\
- If you don\'92t have public class then this restriction is not there.\
\
e.g. \
If you have to declare a class named \'93Student\'94 as public then it must be declared in \'93Student.java\'94 file (Name has to Student.java)\
\
Can we have more than one class in one file? Yes. (Not recommended)\
\
If we have 3 classes in one file and we compile the program how many classes(.class) will be generated. => 3 .class files \
\

\f0\b Is main() function mandatory?\

\f1\b0 Yes. In entire project/application there MUST be one class consist of main() function. \

\f0\b \
main() function:\
	public static void main(String[ ] args) \{ \'85. \} \
- 
\f1\b0 It is an entry point function from where JVM starts the execution.\
- JVM calls main() function directly using class name and hence main() function is \'93static\'94\
- We can pass arguments to main() function while using \'93java\'94 command. e.g. \
	#java AdditionDemo 10 20\
Here 10 and 20 are command line arguments which gets assigned to args[] array (Parameter of main() function)\
- main() must be declared with \'93public\'94 access specifier, otherwise JVM would not access that.\
- main() function does not return anything and hence return type is \'93void\'94 \
\
Object creation in Java:\
\
 - We use \'93new\'94 operator to create java object.\
 - When we run Java program, by default we get memory (1/64th of RAM memory)\
 - There are 2 types of memory - Stack and Heap\
 - Object created using \'93new\'94 gets memory inside Heap area.\
 \
Reference v/s object:\
- Reference is a variable which gets stored on stack and it points to an object created in heap memory. (Its a pointer)\
- Object : Actual memory which gets created in Heap.\
- Reference holds memory address of an object.\
- Reference count : Number of references pointing to an object is called \'93Reference count\'94.\
- Java tracks \'93Reference count\'94 of every object. Whenever count becomes 0, that object becomes eligible for \'93Garbage Collection\'94 process.\
\
Every function call we make -> New stack frame gets created in Stack memory.\
All local variables declared in a function gets stored in stack memory.\
Whenever function execution is done, stack frame gets deleted.\
\
\'93this\'94 keyword: \
- It is a reference variable available in every instance function.\
- It always refers to \'93Current object\'94 for which instance function is called.\
- Using \'93this\'94 keyword we can access instance properties/functions.\
- We cannot use \'93this\'94 keyword inside static functions.\
\
\
\'93final\'94 Keyword:
\f2\fs40 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs44 \cf0 \
\cf4 \cb5 final\cf0  - variable \cf6 :\cf0  \cf7 Constat\cf0  \cb1 \
\cf4 \cb5 final\cf0  - class.   \cf6 :\cf0  \cf7 Can\cf0  \cf8 NOT\cf0  \cf7 be\cf0  \cf9 inherited\cf0  (\cf4 final\cf0  class)\cb1 \
\cf4 \cb5 final\cf0  - method   \cf6 :\cf0  \cf7 Can\cf0  \cf7 NOT\cf0  be overridden 
\f1\fs72 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs68 \cf0 \
Constructor:\
	- Special method whose name is exactly same as \'93class name\'94.\
	e.g. If class name is Student then constructor can be declared as below.\
		\
			class Student \{\
               // constructor \
				Student() \{ \}\
			\}	\
\
	- It does NOT have return type\
	- Constructor gets called automatically whenever we create an object of a class using \'93new\'94 operator.\
	e.g. If we create 2 objects of Student then Student() constructor will be called 2 times.\
\
	- It is used to initialize instance properties of an object.\
	\
	- In Java, there are 2 types of constructor:\
		1) Default constructor (non-arg constructor). \
		2) Parameterised constructor \
\
	- By default if you do not write any constructor, JVM would provide default constructor. (Only when you don\'92t write any constructor)\
\
	- In case of inheritance, when we create object of child class -> 1st constructor of parent is called and then child class. (Constructor chaining)\
\
	- Constructor can be overloaded.\
\
	- In Java there is no copy constructor.\
\
\
	- We can call our own constructor from our constructor only using \'93this()\'94 keyword. That call MUST be on 1st line.\
e.g\
	class Product \{\
		prodcutName, mfg, price, color, qty \
		discount \
		offer \
		\
		Product(prodcutName, mfg, price, color, qty) \{\
				this.productName = prodctName;\
				\'85	\
		\}\
		Product(prodcutName, mfg, price, color, qty, discount) \{\
			this(prodcutName, mfg, price, color, qty)\
			this.discount = discount;\
		\}\
		Product(prodcutName, mfg, price, color, qty, offer) \{\}\
		Product(prodcutName, mfg, price, color, qty, discount, offer) \{\}\
	\}\
\
\
	If we want string representation for our object instead of haschode(memory address), then we MUST override method \
\'93public String toString( )\'94 from Object class.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs88 \cf0  
\f2\fs44 \cf4 \cb5 \expnd0\expndtw0\kerning0
class\cf0  \cf7 Student\cf0  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb5     \cf7 int\cf0  \cf8 id\cf0 ;\cb1 \
\cb5     \cf7 String\cf0  \cf8 name\cf0 ;\cb1 \
\cb5     \cf9 Student\cf0 () \{\cb1 \
\cb5         \cf7 System\cf0 .\cf10 out\cf0 .\cf9 println\cf0 (\cf11 "Default cosntructor"\cf0 );\cb1 \
\cb5     \}\cb1 \
\cb5     \cf9 Student\cf0 (\cf7 int\cf0  \cf8 id\cf0 , \cf7 String\cf0  \cf8 name\cf0 ) \{\cb1 \
\cb5         \cf4 this\cf0 (); \cf12 // Calling self constructor\cf0 \cb1 \
\cb5         \cf7 System\cf0 .\cf10 out\cf0 .\cf9 println\cf0 (\cf11 "Parameterised constructor"\cf0 );\cb1 \
\cb5         \cf4 this\cf0 .\cf8 id\cf0  = \cf8 id\cf0 ;\cb1 \
\cb5         \cf4 this\cf0 .\cf8 name\cf0  = \cf8 name\cf0 ;\cb1 \
\cb5     \}\
	 // overriding Object method\cb1 \
\cb5     \cf4 public\cf0  \cf7 String\cf0  \cf9 toString\cf0 () \{\cb1 \
\cb5         \cf6 return\cf0  \cf4 this\cf0 .\cf8 id\cf0  + \cf11 ", "\cf0  + \cf4 this\cf0 .\cf8 name\cf0 ;\cb1 \
\cb5     \}\cb1 \
\cb5 \}\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\fs68 \cf0 \kerning1\expnd0\expndtw0 \
\'93static\'94 block: \
	\
	- It is a block inside class with keyword \'93static\'94 \
	e.g\
			static \{ \'85 \}\
	\
	- It gets executed only ONCE when class is loaded in memory by JVM.\
\
	- If class has main() function, static block will get called before main() function\
	- Use of static block:\
		a) One time logic related to class can be written in static block. (e.g DB initialization, Socket creation, Opening file etc)\
		b) We can change entry point function using static block. \
\
	- We can have more than one static blocks. Order of execution is decided by sequence in which they are written.\
\
	- If class is NOT loaded in memory, then static block will not be executed.\
\
	Instance block:\
\
	- It is a block inside class, outside functions. (Without any keyword) \
\
	- It gets executed automatically, whenever object is created.\
\
	- It gets executed before constructor.\
\
	- Code which we want to execute on each object creation can go in instance block.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs104 \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\fs60 \cf4 \cb5 \expnd0\expndtw0\kerning0
public\cf0  \cf4 class\cf0  \cf7 Puzzle1\cf0  \{\cb1 \
\cb5     \{ \cf7 System\cf0 .\cf10 out\cf0 .\cf9 println\cf0 (\cf11 "ONE"\cf0 );\}\
\cb1 \
\cb5     \cf4 static\cf0  \{ \cf7 System\cf0 .\cf10 out\cf0 .\cf9 println\cf0 (\cf11 "TWO"\cf0 );\}\
\cb1 \
\cb5     \cf4 public\cf0  \cf4 static\cf0  \cf7 void\cf0  \cf9 main\cf0 (\cf7 String\cf0 [] \cf8 args\cf0 ) \{\cb1 \
\cb5         \cf7 System\cf0 .\cf10 out\cf0 .\cf9 println\cf0 (\cf11 "THREE"\cf0 );\cb1 \
\cb5         \cf7 Puzzle1\cf0  \cf8 p2\cf0  = \cf6 new\cf0  \cf9 Puzzle1\cf0 ();\cb1 \
\cb5     \}\cb1 \
\cb5 \
    \cf9 Puzzle1\cf0 () \{ \cf7 System\cf0 .\cf10 out\cf0 .\cf9 println\cf0 (\cf11 "SIX"\cf0 );\}\cb1 \
\cb5 \
    \cf4 static\cf0  \{ \cf9 fun\cf0 (); \cf7 System\cf0 .\cf10 out\cf0 .\cf9 println\cf0 (\cf11 "FOUR"\cf0 ); \}\cb1 \
\cb5 \
    \cf4 static\cf0  \cf7 void\cf0  \cf9 fun\cf0 () \{\cb1 \
\cb5         \cf7 System\cf0 .\cf10 out\cf0 .\cf9 println\cf0 (\cf11 "FIVE"\cf0 );\cb1 \
\cb5         \cf7 Puzzle1\cf0  \cf8 p1\cf0  = \cf6 new\cf0  \cf9 Puzzle1\cf0 ();\cb1 \
\cb5     \}\cb1 \
\cb5 \}
\f3\b \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs42 \cf13 \kerning1\expnd0\expndtw0 \CocoaLigature0 TWO\
FIVE\
ONE\
SIX\
FOUR\
THREE\
ONE\
SIX\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0\fs68 \cf0 \CocoaLigature1 	1) Write a function which takes number and returns its reverse.\
		int reverse(int num) \{\
			\'85 \
		\}\
	\
	2) Check if number is Armstrong or not?\
		153 \
		1 + 125 + 27 =153 \
\
		boolean isArmstrong(int num) \{\
				\'85 \
		\}\
\
	3) Take n from user and print fibonacci  series.\
		e.g. n = 10\
		1 1 2 3 5 8 13 21 34 55\
\
		void printFibonacci(int n) \{\
			\
		\}\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}